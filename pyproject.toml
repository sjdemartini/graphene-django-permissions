[tool]
[tool.poetry]
name = "graphene-django-permissions"
version = "1.0.0"
homepage = "https://github.com/sjdemartini/graphene-django-permissions"
description = "A performant holistic permissions layer for graphene-django/GraphQL."
authors = ["Steven DeMartini <sjdemartini@users.noreply.github.com>"]
readme = "README.md"
license =  "MIT"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]
packages = [
    { include = "graphene_django_permissions" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.7,<4.0"
graphene-django = ">=3.0.2"

[tool.poetry.dev-dependencies]
black = "22.12.0"
django-stubs = "4.2.0"
mypy = "1.2.0"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-django = "^4.5.2"
ruff = "0.0.264"
tox = "^4.5.1"
twine = "^4.0.0"
pre-commit = "^2.19.0"
toml = "^0.10.2"
bump2version = "^1.0.1"
graphql-core = "~3.1.7"  # 3.2+ appears to be incompatible with graphene currently
graphene-django-optimizer = "^0.9.0"
factory-boy = "^3.2.1"

[tool.pytest.ini_options]
addopts = "--ds=tests.settings"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
]

[tool.black]
line-length = 88
preview = true  # Format strings
target-version = ['py37', 'py38']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | build
    | dist
  )/
  |
  .*migrations.*  # Never format migrations files
)
'''

[tool.mypy]
python_version = '3.7'
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
# For convenience, display the error codes of the violations. Makes it easier to
# `type: ignore[specific-violation]` rather than use sweeping type-ignores.
show_error_codes = true
packages = [
  "graphene_django_permissions",
  "tests",
]
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "tests.settings"

[tool.ruff]
select = [
  "E",
  "F",
  "W",
  "I", # isort
  "B", # flake8-bugbear
  "DJ", # flake8-django
  "UP", # pyupgrade
  "C4", # unnecessary comprehensions (formerly handled by pyupgrade)
  "RUF", # Ruff-specific lint-rules https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
]
ignore = [
  # Don't enforce max line length, since black handles line-length automatically for
  # code, and disagrees with ruff/flake8 in certain situations
  "E501",
  # Disable the opinionated bugbear rules
  "B9",
  # Disable warnings about using __all__ for fields in Django admin
  # (https://beta.ruff.rs/docs/rules/django-all-with-model-form/), since the concern is
  # minor
  "DJ007",
  # Disable some "ambiguous unicode char" rules since we're fine with curly quotes
  "RUF001",
  "RUF002",
  "RUF003",
]
line-length = 88
exclude = [
    ".git",
    "__pycache__",
    "setup.py",
    "build",
    "dist",
    "docs",
    "releases",
    ".venv",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
    ".vscode",
    ".github",
    ".coverage",
    "*/migrations/*",
]
# Always generate Python 3.7-compatible code.
target-version = "py37"

[tool.ruff.per-file-ignores]
# Ignore warnings about model definitions needing __str__ in the test context
"tests/**/*" = ["DJ008"]
